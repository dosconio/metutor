;MBR16REX YO-ON REE11,12
    ;EDIT BY VSCODE
    ;BUBBLE(MAOPAO) SORT
    NUMOF_SEG EQU 5
;SET STACK
    ;WHY THE AUTHOR USE CS?
        ;CONSIDER SHORTEN ORDER ,
        ;OR THE PROG BE RUN
    MOV EAX,CS
    MOV SS,EAX
    MOV SP,0X7C00
    ;PUSH FROM THE BACKOF THE ENTRY
;CALU THE SEG' VALUE
    MOV EAX,[CS:GDT_POSI+0X7C00+0X02]
    XOR EDX,EDX
    MOV EBX,16
    DIV EBX
    MOV DS,EAX
    MOV EBX,EDX

;0# CREATE SEGSYM(NULL)
    MOV DWORD[EBX+0X00],0X00000000
    MOV DWORD[EBX+0X04],0X00000000

;1# CREATE <DATA>0~4GB SEGSYM
    ;BASE 0 , LIMIT FFFFF , 4KB(G=1) ;DOS=1(32bit)
    MOV DWORD[EBX+0X08],0X0000FFFF
    MOV DWORD[EBX+0X0C],0X00CF9200

;2# CREATE <CODE> SEGSYM
    ;BASE 7C00 , LIMIT 512BYTE , BYTE(G=0) ;DOS=1(32bit)
    MOV DWORD[EBX+0X10],0X7C0001FF
    MOV DWORD[EBX+0X14],0X00409800

;3# CREATE <DATA> SEG'SYM
    ;BASE 7C00 , LIMIT 512BYTE , BYTE(G=0) ;DOS=1(32bit)
    MOV DWORD[EBX+0X18],0X7C0001FF
    MOV DWORD[EBX+0X1C],0X00409200

;4# CREATE <STAK> SEGSYM 6C00~7BFF
    ;BASE 7C00 , LIMIT FFFFE , PAGE(G=1) ;DOS=1(32bit)
    MOV DWORD[EBX+0X20],0X7C00FFFE
    MOV DWORD[EBX+0X24],0X00CF9600
;ENABLE PROTECTION
    MOV WORD[CS:GDT_POSI+0X7C00],NUMOF_SEG*8-1
    LGDT [CS:GDT_POSI+0X7C00]
    ; ACTIVE A20 WIRE
    IN AL,0X92
    OR AL,0000_0010B
    OUT 0X92,AL
    CLI
    MOV EAX,CR0
    OR EAX,1
    MOV CR0,EAX
    JMP DWORD 0X0010:MODE32
    ;10H/8D = 2#
    ;INVISIBLE XCHG CS
    [BITS 32]
    MODE32:
;INIT 32
    MOV EAX,0X0018
    MOV DS,EAX
    ;0018H/8D=3#

    MOV EAX,0X0008;1#
    MOV ES,EAX
    MOV FS,EAX
    MOV GS,EAX


    MOV EAX,0X0020;4#<STAK>
    MOV SS,EAX
    XOR ESP,ESP

;[MAIN]
    MOV DWORD[ES:0XB8000],0x0750074D
    ;BUBBLE SORT
    PUSH EAX
        XOR EBX,EBX
    FOR1:
        MOV AH,BYTE[STRDATA+BX]
		MOV CX,BX
		PUSH EBX

        FOR2:
			INC BX
			MOV AL,BYTE[STRDATA+BX]
			CMP AH,AL
			JBE CONTINUE
			MOV AH,AL
			MOV CX,BX;AH>AL
			CONTINUE:
			CMP BX,GDT_POSI-STRDATA-1
			JB FOR2

		POP EBX
		CMP CX,BX
		JE CONTINUE2
			MOV AH,BYTE[STRDATA+BX]
			XCHG BX,CX
			MOV AL,BYTE[STRDATA+BX]
			MOV BYTE[STRDATA+BX],AH
			XCHG BX,CX
			MOV BYTE[STRDATA+BX],AL
		CONTINUE2:
		INC EBX
		CMP BX,GDT_POSI-STRDATA-1
		JB FOR1
		POP EAX
;:[PRT]
		MOV ECX,GDT_POSI - STRDATA
		XOR EBX,EBX
	PRTLUP:
		MOV AH,0X07
		MOV AL,[STRDATA+EBX]
		MOV [ES:0XB80A0+2*EBX],AX
		INC EBX
		LOOP PRTLUP


;END
	HLT
    ;NA MAKE GDT AND LOAD_GDT
    STRDATA DB 's0ke4or92xap3fv888giuzjcy5l1m7hd6bnqtw.'
    GDT_POSI:
        DW 0
        DD 0X00007E00
    TIMES 510-$+$$ DB 0
        DW 0XAA55